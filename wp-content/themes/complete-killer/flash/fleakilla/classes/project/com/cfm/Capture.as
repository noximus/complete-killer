package com.cfm{	import flash.display.*;	import flash.events.*;	import flash.errors.*;	import flash.net.*;	import flash.media.*;	import flash.external.*;	import flash.utils.*;	import flash.system.*;	import com.cfm.*;	import com.greensock.*;	import com.greensock.easing.*;	import br.com.stimuli.loading.*;		public class Capture extends MovieClip	{		public var ref:String;				public var modal : MovieClip;		public var ulPanel : MovieClip;		public var uploadBtn : MovieClip;		public var ulPreview : MovieClip;		public var wcPanel : MovieClip;		public var webcamBtn : MovieClip;		public var wcPreview : MovieClip;		public var wcError : MovieClip;		public var fbLoading : MovieClip;		public var fbPanel : MovieClip;		public var facebookBtn : MovieClip;		public var fbPreview : MovieClip;				//Local Variables		private var _model:AppModel;		private var _origImg:*;		private var _activeImg:*;				//Upload Variables		private var _fileRef:FileReference = null;		private var _loader:Loader;		private var _perc:Number;		private var _path:String;		private var _phase:String;		private var _imgNc:NetConnection;		private var _imgResp:Responder;				//Webcam Variables		private var _camera:Camera;		private var _capture:BitmapData;		private var _wcSaves:Array = [];				//Facebook Variables		private var _fbId:Number = 0;		private var _fbInfo:String = "";		private var _fbPhotos:Array = null;		private var _fbNc:NetConnection;		private var _fbResp:Responder;		private var _lb:Logbox;		private var _bulk:BulkLoader;		private var _large:Loader;		private var _fbRows:Number = 0;		private var _fbMin:Number = 69;		private var _fbMax:Number = 0;		private var _fbLocked:Boolean = false;				public function Capture():void		{			addEventListener(Event.ADDED_TO_STAGE,_initialize,false,0,true);		}				private function _initialize(e):void		{			removeEventListener(Event.ADDED_TO_STAGE, _initialize);						//Global Settings			_model = AppModel.getInstance();			_activeImg = null;			modal.visible = false;			modal.alpha = 0;						//Upload Settings			ulPanel.alpha = 0;			ulPanel.visible = false;			uploadBtn.buttonMode = true;			uploadBtn.addEventListener(MouseEvent.MOUSE_DOWN,_upload,false,0,true);			ulPanel.uploadBrowse.buttonMode = true;			ulPanel.uploadBrowse.addEventListener(MouseEvent.MOUSE_DOWN,_uploadBrowse,false,0,true);			ulPanel.uploadSend.buttonMode = true;			ulPanel.uploadSend.addEventListener(MouseEvent.MOUSE_DOWN,_uploadSend,false,0,true);			ulPanel.uploadCancel.buttonMode = true;			ulPanel.uploadCancel.addEventListener(MouseEvent.MOUSE_DOWN,_uploadCancel,false,0,true);						ulPreview.alpha = 0;			ulPreview.visible = false;			ulPreview.ulClear.buttonMode = true;			ulPreview.ulClear.addEventListener(MouseEvent.MOUSE_DOWN,_clearUpload,false,0,true);			ulPreview.ulEdit.buttonMode = true;			ulPreview.ulEdit.addEventListener(MouseEvent.MOUSE_DOWN,_editUpload,false,0,true);						//Webcam Settings			wcPanel.alpha = 0;			wcPanel.visible = false;			webcamBtn.buttonMode = true;			webcamBtn.addEventListener(MouseEvent.MOUSE_DOWN,_webcam,false,0,true);						wcPreview.alpha = 0;			wcPreview.visible = false;			wcPreview.wcCamClear.buttonMode = true;			wcPreview.wcCamClear.addEventListener(MouseEvent.MOUSE_DOWN,_clearCapture,false,0,true);			wcPreview.wcCamEdit.buttonMode = true;			wcPreview.wcCamEdit.addEventListener(MouseEvent.MOUSE_DOWN,_editCapture,false,0,true);						wcError.alpha = 0;			wcError.visible = false;			wcError.noWebcamClose.buttonMode = true;			wcError.noWebcamClose.addEventListener(MouseEvent.MOUSE_DOWN,_hideNoWebcam,false,0,true);						//Facebook Settings			fbLoading.alpha = 0;			fbLoading.visible = false;						fbPanel.alpha = 0;			fbPanel.visible = false;			facebookBtn.buttonMode = true;			facebookBtn.addEventListener(MouseEvent.MOUSE_DOWN,_facebook,false,0,true);			fbPanel.fbCancel.buttonMode = true;			fbPanel.fbCancel.addEventListener(MouseEvent.MOUSE_DOWN,_facebookCancel,false,0,true);						fbPreview.alpha = 0;			fbPreview.visible = false;			fbPreview.ulClear.buttonMode = true;			fbPreview.ulClear.addEventListener(MouseEvent.MOUSE_DOWN,_clearProfile,false,0,true);			fbPreview.ulEdit.buttonMode = true;			fbPreview.ulEdit.addEventListener(MouseEvent.MOUSE_DOWN,_editProfile,false,0,true);						ExternalInterface.addCallback("fbCancel",_onFbCancel);			ExternalInterface.addCallback("fbUpdate",_onFbUpdate);			ExternalInterface.addCallback("fbInfo",_onFbInfo);		}				/*****************************************************************************************/		// FILE UPLOAD UTILITY		/*****************************************************************************************/				private function _upload(e):void		{			_fileRef = null;			_path = null;			_phase = "upload";			ulPanel.uploadLabel.text = "";			ulPanel.uploadOutput.text = "";						_showModal();			ulPanel.visible = true;			TweenMax.to(ulPanel,0.5,{alpha:1,ease:Quad.easeOut});						_model.trackPage("ent/flea_killah/upload_photo");		}		private function _uploadBrowse(e):void		{			_fileRef = new FileReference();			_addFileListeners(_fileRef);			_fileRef.browse(new Array(new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png")));		}				private function _uploadSend(e):void		{			var stamp = new Date().getTime().toString();			var uploadURL = new URLRequest(_model.getBasePath() + "ent/upload/" + stamp);			if(_fileRef == null) ulPanel.uploadOutput.text = "Please select an image!";			else			{				if(_fileRef.size < 3*1048576) _fileRef.upload(uploadURL);				else ulPanel.uploadOutput.text = "Please select a smaller image!";			}		}				private function _uploadCancel(e):void		{			TweenMax.to(ulPanel,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				_hideModal();				ulPanel.visible = false;			}});		}				private function _clearUpload(e):void		{			TweenMax.to(ulPreview,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				ulPreview.visible = false;				ulPanel.visible = true;								_fileRef = null;				_path = null;				_phase = "upload";				ulPanel.uploadLabel.text = "";				ulPanel.uploadOutput.text = "";				TweenMax.to(ulPanel,0.5,{alpha:1,ease:Quad.easeOut});			}});		}				private function _editUpload(e):void		{			_model.editImage = _origImg;			_model.requestPage("crop");						ulPreview.visible = false;			ulPreview.alpha = 0;			_hideModal();		}				private function _addFileListeners(dispatcher:IEventDispatcher):void 		{            dispatcher.addEventListener(Event.CANCEL,_cancelHandler,false,0,true);            dispatcher.addEventListener(Event.COMPLETE,_completeHandler,false,0,true);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS,_httpStatusHandler,false,0,true);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR,_ioErrorHandler,false,0,true);            dispatcher.addEventListener(Event.OPEN,_openHandler,false,0,true);            dispatcher.addEventListener(ProgressEvent.PROGRESS,_progressHandler,false,0,true);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR,_securityErrorHandler,false,0,true);            dispatcher.addEventListener(Event.SELECT,_selectHandler,false,0,true);            dispatcher.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,_uploadCompleteDataHandler,false,0,true);        }				private function _cancelHandler(event:Event):void {            trace("cancelHandler: " + event);			ulPanel.uploadOutput.text = "Upload Cancelled";        }        private function _completeHandler(event:Event):void {            trace("completeHandler: " + event);			ulPanel.uploadOutput.text = "Upload Complete";        }        private function _uploadCompleteDataHandler(event:DataEvent):void {            trace("uploadCompleteData: " + event);						if(_phase == "upload" && event.data != "failed")			{				trace("upload complete");				_path = event.data;				_phase = "download";				_download();				ulPanel.uploadOutput.text = "Processing Image - Please Wait";			}			else			{				_fileRef = null;				_path = null;				_phase = "upload";				ulPanel.uploadLabel.text = "";				ulPanel.uploadOutput.text = "Server Busy - Please Try Again";			}        }        private function _httpStatusHandler(event:HTTPStatusEvent):void {            trace("httpStatusHandler: " + event);        }                private function _ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);			ulPanel.uploadOutput.text = "Upload Error - Try Again";        }        private function _openHandler(event:Event):void {            trace("openHandler: " + event);			ulPanel.uploadOutput.text = "Opening image file";        }        private function _progressHandler(event:ProgressEvent):void {            var file:FileReference = FileReference(event.target);            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);			var perc = (event.bytesLoaded/event.bytesTotal)*100;			ulPanel.uploadOutput.text =  Math.round(perc) + "% Uploaded";        }        private function _securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);        }        private function _selectHandler(event:Event):void {			            var file:FileReference = FileReference(event.target);			ulPanel.uploadLabel.text = file.name;			if(file.size > 3*1048576)			{				ulPanel.uploadOutput.text = "Image exceeds 3MB limit!";			}			else			{				ulPanel.uploadOutput.text = "Image size OK";			}        }				private function _download():void		{			trace("init download");			if(_path)			{				trace("starting download");				_loader = new Loader();				_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,_downloadProgress,false,0,true);				_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,_downloadComplete,false,0,true);				_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,_downloadError,false,0,true);				_loader.load(new URLRequest(_path));			}			else			{				trace("download path not found");			}		}				private function _downloadProgress(event:ProgressEvent):void {            trace("_downloadProgress bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);        }				private function _downloadComplete(event:Event):void {            trace("_downloadComplete: " + event);						var bmd:BitmapData = new BitmapData(_loader.width,_loader.height);			bmd.draw(_loader);			var img:Bitmap = new Bitmap(bmd);			img.smoothing = true;						_origImg = _loader.content;			_activeImg = img;						_clearTempImg(_path);						if(img.height > img.width)			{				img.height = 290;				img.scaleX = img.scaleY;			}			else			{				img.width = 390;				img.scaleY = img.scaleX;			}						while(ulPreview.ulFrame.numChildren > 1) ulPreview.ulFrame.removeChildAt(ulPreview.ulFrame.numChildren-1);			ulPreview.ulFrame.addChild(img);			img.x = (390-img.width)/2;			img.y = (290-img.height)/2;						TweenMax.to(ulPanel,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				ulPanel.visible = false;				ulPreview.visible = true;				TweenMax.to(ulPreview,0.5,{alpha:1,ease:Quad.easeOut});			}});        }				private function _downloadError(event:IOErrorEvent):void {            trace("_downloadError: " + event);        }				private function _clearTempImg(img):void		{			var slash = img.lastIndexOf("/")+1;			var file = img.substr(slash);						_imgNc = new NetConnection();			_imgNc.objectEncoding = ObjectEncoding.AMF3;			_imgNc.connect(_model.getBasePath() + "jib_remote");			_imgResp = new Responder(_clearImgResult,_clearImgError);			_imgNc.call("JibModel.clearTemp",_imgResp,file);		}				private function _clearImgError(e):void		{			trace("temp deletion failed: " + e);		}				private function _clearImgResult(e):void		{			trace("temp deletion success: " + e);		}				/*****************************************************************************************/		// WEBCAM CAPTURE UTILITY		/*****************************************************************************************/				private function _webcam(e):void		{			//_model.trackPage("ent/flea_killah/take_a_photo");			_camera = Camera.getCamera();						if(_camera != null)			{				_showModal();				wcPanel.visible = true;				TweenMax.to(wcPanel,0.5,{alpha:1,ease:Quad.easeOut});								_camera.setMode(640,480,30,false);				_camera.setQuality(0,100);								wcPanel.webcam.video.smoothing = true;				wcPanel.webcam.video.attachCamera(_camera);								wcPanel.wcCapture.buttonMode = true;				wcPanel.wcCapture.addEventListener(MouseEvent.MOUSE_DOWN,_onWcCapture,false,true);								wcPanel.wcCancel.buttonMode = true;				wcPanel.wcCancel.addEventListener(MouseEvent.MOUSE_DOWN,_onWcCancel,false,true);			}			else			{				_showModal();				wcError.visible = true;				TweenMax.to(wcError,0.5,{alpha:1,Quad:Sine.easeOut});			}		}				private function _onWcCapture(e):void		{			if(_camera.muted)			{				wcError.visible = true;				TweenMax.to(wcError,0.5,{alpha:1,Quad:Sine.easeOut});			}			else			{				_capture = new BitmapData(390,290);				_capture.draw(wcPanel.webcam);								var img:Bitmap = new Bitmap(_capture);				img.smoothing = true;				_activeImg = img;								var orig:Bitmap = new Bitmap(_capture);				_origImg = orig;								while(wcPreview.wcCamPreview.numChildren > 1) wcPreview.wcCamPreview.removeChildAt(wcPreview.wcCamPreview.numChildren-1);				wcPreview.wcCamPreview.addChild(img);								TweenMax.to(wcPanel,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){					wcPanel.visible = false;					wcPreview.visible = true;					TweenMax.to(wcPreview,0.5,{alpha:1,ease:Quad.easeOut});				}});			}		}				private function _onWcCancel(e):void		{			TweenMax.to(wcPanel,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				_hideModal();				wcPanel.visible = false;				_camera = null;				wcPanel.webcam.video.attachCamera(null);			}});		}				private function _clearCapture(e):void		{			TweenMax.to(wcPreview,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				wcPreview.visible = false;				wcPanel.visible = true;				TweenMax.to(wcPanel,0.5,{alpha:1,ease:Quad.easeOut});			}});		}				private function _editCapture(e):void		{			_model.editImage = _origImg;			_model.requestPage("crop");						_camera = null;			wcPanel.webcam.video.attachCamera(null);						wcPreview.visible = false;			wcPreview.alpha = 0;			_hideModal();		}				private function _hideNoWebcam(e):void		{			TweenMax.to(wcError,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				_hideModal();				wcError.visible = false;			}});		}				/*****************************************************************************************/		// FACEBOOK PROFILE UTILITY		/*****************************************************************************************/				private function _facebook(e):void		{			if(_fbPhotos == null) ExternalInterface.call("fb_relay_login");			else _onFbProfiles(null);		}		private function _onFbCancel(e:*):void		{			trace(e);			TweenMax.to(fbLoading,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){fbLoading.visible=false;}});		}				private function _onFbUpdate(e:*):void		{			trace(e);			_showModal();			fbLoading.visible = true;			//fbLoading.progress.scaleX = 0;			TweenMax.to(fbLoading,0.5,{alpha:1,ease:Quad.easeOut});		}				private function _onFbInfo(e:*):void		{			_model.trackPage("ent/flea_killah/facebook_photo");						_fbInfo = e;			_fbNc = new NetConnection();			_fbNc.addEventListener(NetStatusEvent.NET_STATUS,_fbNetStatus,false,0,true);			_fbNc.objectEncoding = ObjectEncoding.AMF3;			_fbNc.connect(_model.getBasePath() + "fb_remote");			_fbResp = new Responder(_fbAlbumResult,_fbAlbumError);			_fbNc.call("FbModel.getPublicAlbums",_fbResp,_fbInfo);		}				private function _fbNetStatus(e):void		{			switch(e.info.code)			{				case "NetConnection.Call.BadVersion":				case "NetConnection.Call.Failed":					_facebookCancel(null);					break;			}		}				private function _fbAlbumError(e):void		{			trace("album error: " + e);						for each(var err in e)			{				trace(err + e[err]);			}						_facebookCancel(null);		}				private function _fbAlbumResult(e):void		{			_fbPhotos = e as Array;			trace("fb images: " + _fbPhotos.length);			var stamp = new Date().getTime();						if(_fbPhotos.length > 0)			{				_bulk = new BulkLoader("loader_" + new Date().getTime());				_bulk.addEventListener(BulkLoader.COMPLETE,_onFbProfiles,false,0,true);				_bulk.addEventListener(BulkLoader.PROGRESS,_onFbProgress,false,0,true);				_bulk.addEventListener(BulkLoader.ERROR,_onFbError,false,0,true); 								var bContext:LoaderContext = new LoaderContext();				bContext.checkPolicyFile = true; 					for(var i=0; i<_fbPhotos.length; i++)				{					_bulk.add(_model.getBasePath() + "kiosk/proxy/fb/" + _fbPhotos[i]["small"],{id:"fb"+i,type:"image"});				}				_bulk.start();			}			else			{				_facebookCancel(null);			}		}				private function _onFbProgress(e):void		{			//fbLoading.progress.scaleX = e.percentLoaded;		}				private function _onFbError(e):void		{			trace("BulkLoader Error: " + e);		}				private function _onFbProfiles(e):void		{			TweenMax.to(fbLoading,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){fbLoading.visible=false;}});						_fbRows = Math.round(_fbPhotos.length/7);			var fbGrid = Grid.build(_fbRows,7,15,90,90);			while(fbPanel.fbGroup.numChildren > 1) fbPanel.fbGroup.removeChildAt(fbPanel.fbGroup.numChildren-1);						fbPanel.fbGroup.y = _fbMin;			fbPanel.fbPrev.visible = false;			fbPanel.fbNext.visible = false;			fbPanel.fbPrev.buttonMode = true;			fbPanel.fbNext.buttonMode = true;			fbPanel.fbPrev.addEventListener(MouseEvent.MOUSE_DOWN,_handleFbImages,false,0,true);			fbPanel.fbNext.addEventListener(MouseEvent.MOUSE_DOWN,_handleFbImages,false,0,true);						_showModal();			fbPanel.visible = true;			TweenMax.to(fbPanel,0.5,{alpha:1,ease:Quad.easeOut});						var limit = _fbPhotos.length;			if(limit > 14) fbPanel.fbNext.visible = true;			var dly = 0;						for(var i = 0; i < limit; i++)			{				var fbt = new Thumb();				fbt.ref = i;								try				{					var bLoader = _bulk.getContent("fb"+i);					trace("Index " + i + ": " + bLoader);										var spr:Sprite = new Sprite();					spr.addChild(bLoader);										var bmd:BitmapData = new BitmapData(spr.width,spr.height);					bmd.draw(spr);					var bmp:Bitmap = new Bitmap(bmd);					bmp.smoothing = true;										bmp.width = 90;					bmp.scaleY = bmp.scaleX;					fbt.frame.addChild(bmp);										bmp.x = (90-bmp.width)/2;					bmp.y = (90-bmp.height)/2;					fbt.x = fbGrid[i].x;					fbt.y = fbGrid[i].y;					fbt.alpha = 1;					fbPanel.fbGroup.addChild(fbt);										fbt.buttonMode = true;					fbt.addEventListener(MouseEvent.CLICK,_facebookSelect,false,0,true);				}				catch(e)				{					trace("parse error: " + e);				}			}						var pages = Math.round(_fbRows/2);			_fbMax = (((pages - 1) * 210) - _fbMin) * -1;			if(pages <= 1) _fbMax = _fbMin;		}				private function _handleFbImages(e):void		{			if(!_fbLocked)			{				_fbLocked = true;				var newY = 0;								if(e.currentTarget.name == "fbPrev") newY = (fbPanel.fbGroup.y + 210);				else newY = (fbPanel.fbGroup.y - 210);				trace("newY: " + newY + ", max: " + _fbMax)								if(newY >= _fbMin) 				{					newY = _fbMin;					fbPanel.fbPrev.visible = false;					fbPanel.fbNext.visible = true;				}				else if(newY <= _fbMax) 				{					newY = _fbMax;					fbPanel.fbPrev.visible = true;					fbPanel.fbNext.visible = false;				}				else				{					fbPanel.fbPrev.visible = true;					fbPanel.fbNext.visible = true;				}								TweenMax.to(fbPanel.fbGroup,0.25,{y:newY,ease:Quad.easeOut,onComplete:function(){					_fbLocked = false;								   				}});			}		}				private function _facebookCancel(e):void		{			_hideModal();			fbLoading.alpha = 0;			fbLoading.visible = false;			fbPanel.alpha = 0;			fbPanel.visible = false;			fbPreview.alpha = 0;			fbPreview.visible = false;		}				private function _facebookSelect(e):void		{			var ref = e.currentTarget.ref;						_large = new Loader();			var context:LoaderContext = new LoaderContext();			context.checkPolicyFile = true; 						_large.contentLoaderInfo.addEventListener(Event.COMPLETE,_facebookPreview,false,0,true);			_large.load(new URLRequest(_model.getBasePath() + "kiosk/proxy/fb/" + _fbPhotos[ref]["big"]),context);		}				private function _facebookPreview(e):void		{			while(fbPreview.ulFrame.numChildren > 1) fbPreview.ulFrame.removeChildAt(fbPreview.ulFrame.numChildren-1);						var bmdo:BitmapData = new BitmapData(_large.width,_large.height);			bmdo.draw(_large);			var orig:Bitmap = new Bitmap(bmdo);			_origImg = orig;						var bmd:BitmapData = new BitmapData(_large.width,_large.height);			bmd.draw(_large);			var img:Bitmap = new Bitmap(bmd);			img.smoothing = true;						if(img.height > img.width)			{				img.height = 290;				img.scaleX = img.scaleY;			}			else			{				img.width = 390;				img.scaleY = img.scaleX;			}						fbPreview.ulFrame.addChild(img);			img.x = (390-img.width)/2;			img.y = (290-img.height)/2;			_activeImg = img;						TweenMax.to(fbPanel,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				fbPanel.visible = false;				fbPreview.visible = true;				TweenMax.to(fbPreview,0.5,{alpha:1,ease:Quad.easeOut});			}});		}				private function _clearProfile(e):void		{			TweenMax.to(fbPreview,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){				fbPreview.visible = false;				fbPanel.visible = true;				TweenMax.to(fbPanel,0.5,{alpha:1,ease:Quad.easeOut});			}});		}				private function _editProfile(e):void		{			_model.editImage = _origImg;			_model.requestPage("crop");						fbPreview.visible = false;			fbPreview.alpha = 0;			_hideModal();		}				/*****************************************************************************************/		// MODAL SCREEN CONTROLS		/*****************************************************************************************/				private function _showModal():void		{			modal.visible = true;			TweenMax.to(modal,0.25,{alpha:0.75,ease:Quad.easeOut});		}				private function _hideModal():void		{			TweenMax.to(modal,0.25,{alpha:0,ease:Quad.easeOut,onComplete:function(){modal.visible=false;}});		}	}}