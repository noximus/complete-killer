package com.cfm{	import flash.display.*;	import flash.events.*;	import flash.geom.Point;	import flash.geom.Matrix;	import flash.utils.getQualifiedClassName;	import flash.net.Responder;	import flash.net.ObjectEncoding;	import flash.net.NetConnection;	import flash.utils.ByteArray;	import flash.geom.Rectangle;	import com.adobe.images.PNGEncoder;	import com.greensock.*;	import com.greensock.easing.*;	public class Assign extends MovieClip	{		public var createNewHead : MovieClip;		public var previewButton : MovieClip;		public var doneButton : MovieClip;		public var castPanel : MovieClip;		public var castHolder : Sprite;		public var savingOverlay : MovieClip;		public var warningOverlay : MovieClip;		public var poster : MovieClip;				public var sword : MovieClip;		public var flea1 : MovieClip;		public var flea2 : MovieClip;		public var tick1 : MovieClip;		public var tick2 : MovieClip;				private var _model : AppModel;		private var _dropZones : Array;		private var _userImages : Array = [];				private var _currentItemDrag : DragImage;		private var _currentMouseOffset : Point;		private var _currentStartPoint : Point;		private var viewWidth : Number = 980;		private var viewHeight : Number = 650;		public function Assign() : void		{			_model = AppModel.getInstance();			addEventListener(Event.ADDED_TO_STAGE, initialize, false, 0, true);		}		private function initialize(event : Event) : void		{			removeEventListener(Event.ADDED_TO_STAGE, initialize);						//this should match the _trackers array in VideoTrackers.as			_dropZones = [sword, flea1, flea2, tick1, tick2];						createNewHead.buttonMode = true;			createNewHead.addEventListener(MouseEvent.CLICK, newHeadClickHandler, false, 0, true);						previewButton.buttonMode = true;			previewButton.addEventListener(MouseEvent.CLICK, previewClickHandler, false, 0, true);						doneButton.buttonMode = true;			doneButton.addEventListener(MouseEvent.CLICK, doneClickHandler, false, 0, true);						savingOverlay.visible = false;			savingOverlay.alpha = 0;			savingOverlay.addEventListener(MouseEvent.CLICK, clickStop, false, 0, true);						warningOverlay.visible = false;			warningOverlay.alpha = 0;			warningOverlay.bg.addEventListener(MouseEvent.CLICK, clickStop, false, 0, true);			warningOverlay.okButton.buttonMode = true;						castHolder = new Sprite();			castHolder.x = 10;			castHolder.y = 10;			castPanel.addChild(castHolder);						createCastImages();			showAssignedImages();		}				private function createCastImages() : void		{			clearImages();						var images : Array = _model.getWorkingImages();						var n : int = images.length;			for (var i : int = 0;i < n;i++)			{				var dragImage : DragImage = new DragImage(i, Bitmap(images[i]));								dragImage.x += 125 * i + 75;				dragImage.y += 65;				dragImage.scaleX = 0.4;				dragImage.scaleY = 0.4;				castHolder.addChild(dragImage);								dragImage.addEventListener(MouseEvent.MOUSE_DOWN, imageDownHandler, false, 0, true);								_userImages.push(dragImage);			}						if(n > AppModel.MAX_USER_IMAGES - 1)			{				createNewHead.removeEventListener(MouseEvent.CLICK, newHeadClickHandler);				createNewHead.alpha = 0.6;				createNewHead.enabled = false;			}		}				private function showAssignedImages() : void		{				var images : Array = _model.getAssignedImages();			trace("Assign: showAssignedImages: images: ", images.length);			if(images.length > 0)			{				var n:int = images.length;				for (var i:int = 0; i < n; i++)				{					if(images[i] != null)					{						var placed : DragImage = new DragImage(i, Bitmap(images[i]));						placed.scaleX = 0.4;						placed.scaleY = 0.4;						assignImage(placed, MovieClip(_dropZones[i])); 						}				}			}			else			{				trace("No images have been assigned");			}		}				///////////////////////////////////////////////////////////////////////////				private function clearImages() : void		{			var n : int = _userImages.length;			for (var i : int = 0;i < n;i++)			{				var img : DragImage = DragImage(_userImages[i]);				img.removeEventListener(MouseEvent.MOUSE_DOWN, imageDownHandler);				img.destroy();			}						_userImages = [];						while(castHolder.numChildren > 0) castHolder.removeChildAt(castHolder.numChildren - 1);		}		///////////////////////////////////////////////////////////////////////////		// 								Drag and Drop		///////////////////////////////////////////////////////////////////////////				private function imageDownHandler(event : MouseEvent) : void		{			var targetImage : DragImage = DragImage(event.currentTarget);			var copy : DragImage = cloneDragImage(targetImage); 			copy.alpha = 0.7;						castHolder.addChild(copy);									startItemDrag(copy);		}				public function startItemDrag(item : DragImage) : void		{			_currentItemDrag = item;			_currentStartPoint = new Point(item.x, item.y);			_currentMouseOffset = new Point(this.mouseX - _currentItemDrag.x, this.mouseY - _currentItemDrag.y);			stage.addEventListener(MouseEvent.MOUSE_MOVE, stageMouseMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, itemMouseUpHandler);		}		private function stageMouseMoveHandler(event : MouseEvent = null) : void		{			var xVal : Number = this.mouseX - _currentMouseOffset.x;			var yVal : Number = this.mouseY - _currentMouseOffset.y;						_currentItemDrag.x = xVal;			_currentItemDrag.y = yVal;		}		private function itemMouseUpHandler(event : MouseEvent) : void		{			stopItemDrag(event);		}				public function stopItemDrag(event : MouseEvent) : void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, stageMouseMoveHandler);			stage.removeEventListener(MouseEvent.MOUSE_UP, itemMouseUpHandler);			itemDropped();		}		private function itemDropped() : void		{						//check to see if it hit any drop areas			trace("Assign: itemDropped: _currentItemDrag x/y: ", _currentItemDrag.x, " / ", _currentItemDrag.y);						var n : int = _dropZones.length;			for (var i : int = 0;i < n;i++)			{				var drop : MovieClip = MovieClip(_dropZones[i]);				trace("Assign: itemDropped: drop: ", drop, ", i: ", i);				if(drop.hitTestPoint(stage.mouseX, stage.mouseY, true))				{					_currentItemDrag.x = 0;					_currentItemDrag.y = 0;					_currentItemDrag.alpha = 1;										//positions the dragged image in the drop zone					assignImage(_currentItemDrag, drop);										//updates the model with the assigned mapping					_model.assignImage(_currentItemDrag.imageIndex, i);										_currentItemDrag = null;										return;				}			}			trace("Assign: itemDropped: didn't hit anything");			//animates ("snaps") the dragged item back to the cast panel			TweenLite.to(_currentItemDrag, 0.4, {x:_currentStartPoint.x, y:_currentStartPoint.y, alpha: 0, ease:Quad.easeIn, onComplete:destroyDragImage, onCompleteParams:[_currentItemDrag]});		}				private function cloneDragImage(image : DragImage) : DragImage		{			var newImage : DragImage = new DragImage(image.imageIndex, new Bitmap(image.bmp.bitmapData.clone()));						newImage.x = image.x;			newImage.y = image.y;			newImage.scaleX = image.scaleX;			newImage.scaleY = image.scaleY;			newImage.mouseEnabled = false;						return newImage;		}		private function assignImage(image : DragImage, dropZone : MovieClip) : void		{			trace("Assign: assignImage: image: ", image.imageIndex);			clearDropZone(dropZone);						image.x = 0;			image.y = 0;						dropZone.addChild(image);		}		private function clearDropZone(dropZone : MovieClip) : void		{			var n : int = dropZone.numChildren;			for (var i : int = 0;i < n;i++)			{				if(dropZone.getChildAt(i) is DragImage) dropZone.removeChildAt(i); 			}		}			private function destroyDragImage(dragImage : DragImage) : void		{			dragImage.destroy();			castHolder.removeChild(_currentItemDrag);			_currentItemDrag = null;		}		private function newHeadClickHandler(event : MouseEvent) : void		{			_model.requestPage("capture");			_model.trackPage("ent/flea_killah/create_new_head");		}		private function previewClickHandler(event : MouseEvent) : void		{			_model.requestPage("videoPreview");			_model.trackPage("ent/flea_killah/watch_video");		}		private function doneClickHandler(event : MouseEvent) : void		{			var img : Array = _model.getAssignedImages();						if(img.length == 0)			{				warningOverlay.okButton.addEventListener(MouseEvent.CLICK, warningContinue, false, 0, true);				TweenLite.to(warningOverlay, 0.5, {autoAlpha:1});				return;			}						//show saving overlay			TweenLite.to(savingOverlay, 0.5, {delay:1, autoAlpha:1});						//make preview image			var bmpd : BitmapData = new BitmapData(poster.width, poster.height, false);			var m : Matrix = new Matrix();			var r : Rectangle = poster.getBounds(this);			m.translate(-r.x, -r.y);			bmpd.draw(this, m);			var bmp : Bitmap = new Bitmap(bmpd);			_model.setMoviePoster(bmp);						//save animation to server here			var data : Object = new Object();			if(img[0] != null) data.position1 = encodePNG(Bitmap(img[0]));			if(img[1] != null) data.position2 = encodePNG(Bitmap(img[1]));			if(img[2] != null) data.position3 = encodePNG(Bitmap(img[2]));			if(img[3] != null) data.position4 = encodePNG(Bitmap(img[3]));			if(img[4] != null) data.position5 = encodePNG(Bitmap(img[4]));			var server : NetConnection = new NetConnection();			server.objectEncoding = ObjectEncoding.AMF3;			server.connect(_model.getServiceURL());			server.addEventListener(NetStatusEvent.NET_STATUS, statusEventHandler, false, 0, true);			var response = new Responder(submitComplete, submitError);						trace("Assign: doneClickHandler: _model.getShareLink(): ", _model.getShareID());			if(_model.getShareID() == "" || _model.getShareID() == null)			{				server.call("JibModel.saveUserData", response, data);			}			else			{				data.unique = _model.getShareID();				server.call("JibModel.updateUserData", response, data);			}						_model.trackPage("ent/flea_killah/share_video");		}				private function statusEventHandler(event : NetStatusEvent) : void		{			if(event.info.code == "NetConnection.Call.Failed")			{				submitComplete("");			}		}		private function submitComplete(response : *) : void		{			trace("Assign: submitComplete: event: ", response);			if(response != "error")			{				_model.setShareID(response);			}			TweenLite.killTweensOf(savingOverlay);			TweenLite.to(savingOverlay, 0.3, {autoAlpha:0});			_model.requestPage("share");		}		private function submitError(response : String) : void		{			trace("Assign: submitError: response: ", response);		}				private function encodePNG(bitmap : Bitmap) : ByteArray		{			return PNGEncoder.encode(bitmap.bitmapData);		}				private function warningContinue(event : MouseEvent) : void		{			TweenLite.to(warningOverlay, 0.5, {autoAlpha:0});			warningOverlay.okButton.removeEventListener(MouseEvent.CLICK, warningContinue);		}				private function clickStop(event : MouseEvent) : void		{					}	}}