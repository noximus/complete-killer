package com.cfm{	import flash.display.*;	import flash.events.*;	import flash.errors.*;	import flash.net.*;	import flash.geom.*;		import fl.controls.Slider;	import com.cfm.*;	import com.greensock.*;	import com.greensock.easing.*;		public class Crop extends MovieClip	{		public var ref:String;				public var cropper : MovieClip;		public var cropOutline : MovieClip;		public var save : MovieClip;		public var back : MovieClip;		public var reset : MovieClip;		public var cancel : MovieClip;		public var refine : MovieClip;		public var scaler : Slider;		public var rotater : Slider;		public var flip : MovieClip;		public var preview : MovieClip;		public var previewMask : MovieClip;		public var cropMask : MovieClip;				private var mPoints:Array = new Array();		private var cPoints:Array = new Array();				private var _model:AppModel;		private var _scaleVal:Number = 1;		private var _rotationVal:Number = 0;		private var _faceX:Number;		private var _faceY:Number;		private var _isRefined:Boolean;		private var _faceMask:Sprite;		private var _editImg:Bitmap = null;		private var _dragPoint:* = null;				private var _xOff:Number;		private var _yOff:Number;				public function Crop():void		{			_model = AppModel.getInstance();			this.addEventListener(Event.ADDED_TO_STAGE,_initialize,false,0,true);		}				private function _initialize(e):void		{			//Set Defaults			_isRefined = false;			_faceX = cropper.faceBox.x;			_faceY = cropper.faceBox.y;			cropOutline.mouseEnabled = false;						//Build Image Container			_faceMask = new Sprite();			cropper.faceBox.buttonMode = true;			cropper.faceBox.addEventListener(MouseEvent.MOUSE_DOWN,_startFaceCtrl,false,0,true);			cropper.faceBox.addEventListener(MouseEvent.MOUSE_UP,_stopFaceCtrl,false,0,true);			cropper.faceCtrl.visible = false;			cropper.faceCtrl.addChild(_faceMask);						//Build Drag Points			for(var i=1; i<=8; i++)			{				cropper.faceCtrl["m"+i].addEventListener(MouseEvent.MOUSE_DOWN,_startDragCtrl,false,0,true);				cropper.faceCtrl["c"+i].addEventListener(MouseEvent.MOUSE_DOWN,_startDragCtrl,false,0,true);				mPoints.push(new Point(cropper.faceCtrl["m"+i].x,cropper.faceCtrl["m"+i].y));				cPoints.push(new Point(cropper.faceCtrl["c"+i].x,cropper.faceCtrl["c"+i].y));			}						//Set Mouse Actions			save.alpha = 0;			save.visible = false;			save.buttonMode = true;			save.addEventListener(MouseEvent.MOUSE_DOWN,_saveCrop,false,0,true);						back.alpha = 0;			back.visible = false;			back.buttonMode = true;			back.addEventListener(MouseEvent.MOUSE_DOWN,_deactivateRefine,false,0,true);						reset.alpha = 0;			reset.visible = false;			reset.buttonMode = true;			reset.addEventListener(MouseEvent.MOUSE_DOWN,_resetPoints,false,0,true);						cancel.buttonMode = true;			cancel.addEventListener(MouseEvent.MOUSE_DOWN,_imageReturn,false,0,true);						refine.buttonMode = true;			refine.addEventListener(MouseEvent.MOUSE_DOWN,_activateRefine,false,0,true);						scaler.addEventListener(Event.CHANGE,_sliderChange,false,0,true);			rotater.addEventListener(Event.CHANGE,_rotaterChange,false,0,true);						flip.buttonMode = true;			flip.addEventListener(MouseEvent.MOUSE_DOWN,_flipChange,false,0,true);						//Load Active Image			_editImg = _model.editImage;			_editImg.smoothing = true;			_editImg.x = -(_editImg.width)/2;			_editImg.y = -(_editImg.height)/2;			cropper.faceBox.addChild(_editImg);						//Set Initial Crop			_cropFace(null);		}				private function _imageReturn(e):void		{			_model.requestPage("capture");		}				private function _sliderChange(e):void		{			trace("slider changed: " + scaler.value);			cropper.faceBox.scaleX = cropper.faceBox.scaleY = scaler.value;			_cropFace(null);		}				private function _rotaterChange(e):void		{			trace("rotater changed: " + rotater.value);			cropper.faceBox.rotation = rotater.value;			_cropFace(null);		}				private function _flipChange(e):void		{			cropper.faceBox.scaleX *= -1;			_cropFace(null);		}				private function _saveCrop(e):void		{			_model.saveWorkingImage(Bitmap(preview.getChildAt(preview.numChildren-1)));			_model.requestPage("assign");			_model.trackPage("ent/flea_killah/save_photo");		}		/*******************************************************************************************************************************/				private function _setMask(e):void 		{						_faceMask.graphics.clear();			_faceMask.graphics.beginFill(0x000000);			_faceMask.graphics.moveTo(cropper.faceCtrl.m1.x,cropper.faceCtrl.m1.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c1.x,cropper.faceCtrl.c1.y,cropper.faceCtrl.m2.x,cropper.faceCtrl.m2.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c2.x,cropper.faceCtrl.c2.y,cropper.faceCtrl.m3.x,cropper.faceCtrl.m3.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c3.x,cropper.faceCtrl.c3.y,cropper.faceCtrl.m4.x,cropper.faceCtrl.m4.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c4.x,cropper.faceCtrl.c4.y,cropper.faceCtrl.m5.x,cropper.faceCtrl.m5.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c5.x,cropper.faceCtrl.c5.y,cropper.faceCtrl.m6.x,cropper.faceCtrl.m6.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c6.x,cropper.faceCtrl.c6.y,cropper.faceCtrl.m7.x,cropper.faceCtrl.m7.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c7.x,cropper.faceCtrl.c7.y,cropper.faceCtrl.m8.x,cropper.faceCtrl.m8.y);			_faceMask.graphics.curveTo(cropper.faceCtrl.c8.x,cropper.faceCtrl.c8.y,cropper.faceCtrl.m1.x,cropper.faceCtrl.m1.y);			_faceMask.graphics.endFill();						_cropFace(null);		}				/*******************************************************************************************************************************/				private function _startDragCtrl(e):void 		{			_dragPoint = e.currentTarget;			_dragPoint.startDrag();			stage.addEventListener(MouseEvent.MOUSE_UP,_stopDragCtrl,false,0,true);			stage.addEventListener(MouseEvent.MOUSE_MOVE,_moveDragCtrl,false,0,true);		}				private function _moveDragCtrl(e):void		{			_setMask(e);		}				private function _stopDragCtrl(e):void 		{			_dragPoint.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_UP,_stopDragCtrl);			stage.removeEventListener(MouseEvent.MOUSE_MOVE,_moveDragCtrl);			e.updateAfterEvent();			_cropFace(null);		}				private function _startFaceCtrl(e):void 		{			e.currentTarget.startDrag();		}						private function _stopFaceCtrl(e):void 		{			e.currentTarget.stopDrag();			e.updateAfterEvent();			_cropFace(null);		}				/*******************************************************************************************************************************/				function _activateRefine(e):void		{			trace("activating crop tool");			_isRefined = true;						_setMask(null);			cropOutline.visible = false;			cropper.faceCtrl.visible = true;			cropper.faceBox.buttonMode = false;			cropper.faceBox.removeEventListener(MouseEvent.MOUSE_DOWN,_startFaceCtrl);			cropper.faceBox.removeEventListener(MouseEvent.MOUSE_UP,_stopFaceCtrl);			cropper.faceBox.mask = _faceMask;						back.visible = true;			save.visible = true;			reset.visible = true;			TweenMax.to(back,0.5,{alpha:1,ease:Quad.easeOut});			TweenMax.to(save,0.5,{alpha:1,ease:Quad.easeOut});			TweenMax.to(reset,0.5,{alpha:1,ease:Quad.easeOut});			TweenMax.to(refine,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){refine.visible=false}});						_cropFace(null);		}				function _deactivateRefine(e):void		{			trace("deactivating crop tool");			_isRefined = false;						cropOutline.visible = true;			cropper.faceCtrl.visible = false;			cropper.faceBox.buttonMode = true;			cropper.faceBox.addEventListener(MouseEvent.MOUSE_DOWN,_startFaceCtrl,false,0,true);			cropper.faceBox.addEventListener(MouseEvent.MOUSE_UP,_stopFaceCtrl,false,0,true);			cropper.faceBox.mask = null;						refine.visible = true;			TweenMax.to(refine,0.5,{alpha:1,ease:Quad.easeOut});			TweenMax.to(back,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){back.visible=false}});			TweenMax.to(save,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){save.visible=false}});			TweenMax.to(reset,0.5,{alpha:0,ease:Quad.easeOut,onComplete:function(){reset.visible=false}});						_cropFace(null);		}				function _cropFace(e):void 		{			if(_isRefined) cropper.faceCtrl.visible = false;						var cutout:BitmapData = new BitmapData(269,339,true,0x000000);			cutout.draw(cropper);						var cropped:Bitmap = new Bitmap(cutout);			cropped.smoothing = true;						while(preview.numChildren > 1) preview.removeChildAt(preview.numChildren-1);			preview.addChild(cropped);						if(_isRefined) cropper.faceCtrl.visible = true;		}				/*******************************************************************************************************************************/				private function _reset():void		{			cropper.faceBox.x = _faceX;			cropper.faceBox.y = _faceY;			cropper.faceBox.scaleX = cropper.faceBox.scaleY = 1;			cropper.faceBox.rotation = 0;			scaler.value = 1;			rotater.value = 0;			_resetPoints(null);		}				private function _resetPoints(e):void		{			for(var i=1; i<=8; i++)			{				cropper.faceCtrl["m"+i].x = mPoints[i-1].x;				cropper.faceCtrl["m"+i].y = mPoints[i-1].y;				cropper.faceCtrl["c"+i].x = cPoints[i-1].x;				cropper.faceCtrl["c"+i].y = cPoints[i-1].y;			}			_setMask(null);			_cropFace(null);		}	}}