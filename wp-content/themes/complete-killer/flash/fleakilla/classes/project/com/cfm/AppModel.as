package com.cfm{	import flash.display.*;	import flash.events.*;	import flash.errors.*;	import flash.net.*;		public class AppModel extends EventDispatcher	{		private static var _instance:AppModel = null;			public static const ON_PAGE_CHANGE:String = "onPageChange";		public static const ON_IMAGE_EDIT:String = "onImageEdit";		public static const ON_IMAGE_SAVED:String = "onImageSaved";		public static const MAX_USER_IMAGES : int = 5;				private var _pages:Array = new Array();		private var _currPage:* = null;		private var _nextPage:* = null;				private var _editImage:* = null;				private var _workingImages : Array = [];		private var _assignedImages : Array = [];		private var _moviePoster : Bitmap;		private var _isStandAlone : Boolean;		private var _shareID : String = "";		private var _trackingEnabled : Boolean = true;		private var _basePath:String = "http://www.completekiller.com/";				///////////////////////////////////////////////////////////////////////////				public function AppModel()		{			if(_instance != null) throw(new Error("There is only one AppModel"));		}				public function setBasePath(path:String)		{			if(path != null && path != "") _basePath = path;		}				public function getBasePath():String		{			return _basePath;		}				public function setShareID(shareID : String) : void		{			trace("AppModel: setShareID: shareID: ", shareID);			_shareID = shareID;		}				public function getShareID() : String		{			trace("AppModel: getShareID: _shareID: ", _shareID);			return _shareID;		}		public function setStandAloneStatus(isStandAlone : Boolean) : void		{			trace("AppModel: setStandAloneStatus: isStandAlone: ", isStandAlone);			_isStandAlone = isStandAlone;		}				public function getStandAloneStatus() : Boolean		{			return _isStandAlone;		}		public function setMoviePoster(bmp : Bitmap) : void		{			_moviePoster = bmp;		}				public function getMoviePoster() : Bitmap		{			return _moviePoster;		}				public function setTrackingEnabled(isEnabled : Boolean) : void		{			_trackingEnabled = isEnabled;		}		//for assigning imagegs that are loaded in standalone mode		public function assignLoadedImage(bitmap : Bitmap, imageIndex : int) : void		{			trace("AppModel: assignLoadedImage: bitmap.width: ", bitmap.width, ", imageIndex: ", imageIndex);			_assignedImages[imageIndex] = new Bitmap(bitmap.bitmapData.clone());			_workingImages[imageIndex] = new Bitmap(bitmap.bitmapData.clone());		}				public function hasMoviePoster() : Boolean		{			return (_moviePoster != null);		}		public function getServiceURL() : String		{			return _basePath + "jib_remote";		}				public function trackPage(pathName : String) : void		{			if(_trackingEnabled) 				navigateToURL(new URLRequest("javascript:flashAnalytics('"+pathName+"')"),"_self");			else				trace("Tracking Disabled: tracking request: ", pathName);		}				public static function getInstance():AppModel		{			if(_instance == null)			{				_instance = new AppModel();			}			return _instance;		}				///////////////////////////////////////////////////////////////////////////				public function set currPage(c):void		{			_currPage = c;		}				public function set nextPage(n):void		{			_nextPage = n;		}				public function set editImage(i):void		{			trace("editing loaded image");			_editImage = i;			dispatchEvent(new Event(ON_IMAGE_EDIT));		}				///////////////////////////////////////////////////////////////////////////				public function get currPage():*		{			return _currPage;		}				public function get nextPage():*		{			return _nextPage;		}				public function get editImage():*		{			return _editImage;		}				///////////////////////////////////////////////////////////////////////////				//Working images are bitmaps that the user has imported in the current session.		public function saveWorkingImage(bmp : Bitmap):void		{			_workingImages.push(bmp);			dispatchEvent(new Event(ON_IMAGE_SAVED));		}				public function getWorkingImages():Array		{			return cloneImageArray(_workingImages);		}		public function assignImage(imageIndex : int, assignedIndex : int) : void		{			trace("AppModel: assignImage: imageIndex: ", imageIndex, ", assignedIndex: ", assignedIndex);			_assignedImages[assignedIndex] = Bitmap(_workingImages[imageIndex]);			trace("AppModel: assignImage: _assignedImages.length: ", _assignedImages.length, ", workingImages.length: ", _workingImages.length);		}				public function getAssignedImages() : Array		{			return cloneImageArray(_assignedImages);		}		private function cloneImageArray(source : Array) : Array		{			//always want to return a copy of the bitmaps			var clone : Array = [];			var n : int = source.length;			for (var i:int = 0; i < n; i++)			{			    if(source[i] != null) clone[i] = new Bitmap(Bitmap(source[i]).bitmapData.clone());			}			return clone;		}				public function reset() : void		{			_editImage = null;			_workingImages = [];			_assignedImages = [];			_shareID = "";		}				public function getShareLink() : String		{			if(_shareID == "") return "";			var link : String = _basePath + "ent/flea_killah/watch/" + _shareID;			trace("AppModel: getShareLink: link: ", link);			return link;		}		///////////////////////////////////////////////////////////////////////////				public function addPage(p)		{			_pages.push(p);			trace("adding page: " + p.ref);		}				public function requestPage(r):void		{			var found:Boolean = true;			trace("factory :: " + r + "()");						switch(r)			{				case "intro":					_nextPage = new Intro();					break;				case "capture":					_nextPage = new Capture();					break;				case "crop":					_nextPage = new Crop();					break;				case "assign":					_nextPage = new Assign();					break;				case "videoPreview":					_nextPage = new VideoPreview();					break;				case "share":					_nextPage = new Share();					break;				default:					found = false;					break;			}						if(found) dispatchEvent(new Event(ON_PAGE_CHANGE));			else trace("requested page not found");		}			}}